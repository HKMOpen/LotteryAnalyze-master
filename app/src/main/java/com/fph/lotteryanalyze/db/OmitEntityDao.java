package com.fph.lotteryanalyze.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "OMIT_ENTITY".
*/
public class OmitEntityDao extends AbstractDao<OmitEntity, Long> {

    public static final String TABLENAME = "OMIT_ENTITY";

    /**
     * Properties of entity OmitEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Expect = new Property(1, String.class, "expect", false, "EXPECT");
        public final static Property Opencode = new Property(2, String.class, "opencode", false, "OPENCODE");
        public final static Property Opentime = new Property(3, String.class, "opentime", false, "OPENTIME");
        public final static Property BallType = new Property(4, String.class, "ballType", false, "BALL_TYPE");
    }

    private DaoSession daoSession;


    public OmitEntityDao(DaoConfig config) {
        super(config);
    }
    
    public OmitEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"OMIT_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"EXPECT\" TEXT UNIQUE ," + // 1: expect
                "\"OPENCODE\" TEXT," + // 2: opencode
                "\"OPENTIME\" TEXT," + // 3: opentime
                "\"BALL_TYPE\" TEXT);"); // 4: ballType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"OMIT_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OmitEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String expect = entity.getExpect();
        if (expect != null) {
            stmt.bindString(2, expect);
        }
 
        String opencode = entity.getOpencode();
        if (opencode != null) {
            stmt.bindString(3, opencode);
        }
 
        String opentime = entity.getOpentime();
        if (opentime != null) {
            stmt.bindString(4, opentime);
        }
 
        String ballType = entity.getBallType();
        if (ballType != null) {
            stmt.bindString(5, ballType);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OmitEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String expect = entity.getExpect();
        if (expect != null) {
            stmt.bindString(2, expect);
        }
 
        String opencode = entity.getOpencode();
        if (opencode != null) {
            stmt.bindString(3, opencode);
        }
 
        String opentime = entity.getOpentime();
        if (opentime != null) {
            stmt.bindString(4, opentime);
        }
 
        String ballType = entity.getBallType();
        if (ballType != null) {
            stmt.bindString(5, ballType);
        }
    }

    @Override
    protected final void attachEntity(OmitEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public OmitEntity readEntity(Cursor cursor, int offset) {
        OmitEntity entity = new OmitEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // expect
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // opencode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // opentime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // ballType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OmitEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setExpect(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOpencode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOpentime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBallType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(OmitEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(OmitEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(OmitEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
